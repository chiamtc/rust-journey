use std::collections::{HashMap, HashSet};

struct Coefs{
    fb: Vec<f32>,
    ff:Vec<f32>
}

fn main() {
    let mut coefs: Vec<Coefs> = vec![
        Coefs{ fb : vec![1.0, -1.4791464805603027, 0.6930942535400391], ff: vec![0.35, -0.4605122089385986, 0.11051515042781829]},
        Coefs{ fb : vec![1.0, -1.785384178161621, 0.7876397967338562], ff: vec![0.35, -0.39466336369514465, 0.4124599575996399]}
    ];


    let test_vecs = vec![0,1,2,3,4];

    for i in coefs.iter(){
        for j in 0..2 {
            println!("{:?} - {:?}", i.ff[1], test_vecs[j as usize]);
        }
    }

  /*  let coefs = vec![
        vec![vec![1,2,3], vec![4,5,6]]
    ];

    for i in &coefs{
        println!("{:?}", coefs[i as usize][0][0]);
    }
*/
   /* let m1 = vec![1, 2, 3];
    let m2 = vec![&m1, &m1, &m1];
    let m3 = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];

    for i in &m2 {
        for j in i {
            println!("{}", j);
        }
    }

    for i in &m3 {
        for j in i {
            println!("{}", j);
        }
    }*/
}

/*    let coef = [
               {
                   fb: [1, -1.4791464805603027, 0.6930942535400391],
                   ff: [0.35, -0.4605122089385986, 0.11051515042781829]
               },
               {
                   fb: [1, -1.785384178161621, 0.7876397967338562],
                   ff: [0.35, -0.39466336369514465, 0.4124599575996399]
               },
               {
                   fb: [1, -1.38728928565979, 0.8583449721336365],
                   ff: [0.35, -0.46513869166374205, 0.3464472651481628]
               },
               {
                   fb: [1, -1.3877276182174683, 0.9699763059616089],
                   ff: [0.35, 0.29919922947883604, 0.04006841853260994]
               }
           ];*/
